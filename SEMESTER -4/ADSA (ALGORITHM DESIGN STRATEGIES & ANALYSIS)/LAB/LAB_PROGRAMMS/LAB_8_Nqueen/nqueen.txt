#include <iostream>
#include <vector>

using namespace std;

// Function to check if a queen can be placed at a given position (row, col)
bool isSafe(vector<vector<int>>& board, int row, int col, int N) {
    // Check if there's a queen in the same column
    for (int i = 0; i < row; ++i) {
        if (board[i][col])
            return false;
    }

    // Check upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j])
            return false;
    }

    // Check upper right diagonal
    for (int i = row, j = col; i >= 0 && j < N; --i, ++j) {
        if (board[i][j])
            return false;
    }

    return true; // If no conflicts, it's safe to place the queen
}

// Recursive function to solve N-Queens problem using backtracking
void solveNQueens(vector<vector<int>>& board, int row, int N, vector<vector<int>>& solutions) {
    // Base case: If all queens are placed successfully
    if (row == N) {
        // Add the current solution to the list of solutions
        solutions.push_back(board);
        return;
    }

    // Try placing queen in each column of current row
    for (int col = 0; col < N; ++col) {
        if (isSafe(board, row, col, N)) {
            // Place the queen at board[row][col]
            board[row][col] = 1;

            // Recur for next row
            solveNQueens(board, row + 1, N, solutions);

            // Backtrack: Remove the queen from board[row][col]
            board[row][col] = 0;
        }
    }
}

// Function to print the solutions
void printSolutions(vector<vector<int>>& solutions) {
    cout << "Number of solutions: " << solutions.size() << endl;
    for (int k = 0; k < solutions.size(); ++k) {
        cout << "Solution " << k + 1 << ":" << endl;
        for (int i = 0; i < solutions[k].size(); ++i) {
            for (int j = 0; j < solutions[k][i].size(); ++j) {
                cout << solutions[k][i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
    }
}

int main() {
    int N;
    cout << "Enter the size of the chessboard (N x N): ";
    cin >> N;

    vector<vector<int>> board(N, vector<int>(N, 0)); // Initialize the chessboard
    vector<vector<int>> solutions; // Store all solutions

    // Solve N-Queens problem
    solveNQueens(board, 0, N, solutions);

    // Print all solutions
    printSolutions(solutions);

    return 0;
}
